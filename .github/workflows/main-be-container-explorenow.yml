# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build, Test, Analyze and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  
jobs:
  build-test-analyze:
    name: Build, Test, and Analyze
    runs-on: windows-latest
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 1.17

    - name: Set up .NET 8
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~\.sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: |
          ${{ runner.os }}-sonar-scanner
          ${{ runner.os }}-sonar
        
    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner-${{ github.run_id }}
        restore-keys: ${{ runner.os }}-sonar-scanner
        
    - name: Install SonarQube scanner
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory -Force
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
        dotnet tool install --global dotnet-coverage
        
    - name: Build and Test
      shell: powershell
      run: |
        dotnet build --no-incremental
        dotnet-coverage collect 'dotnet test' -f xml -o 'coverage.xml'

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"${{ env.PROJECT_KEY }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
        dotnet build --no-incremental
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build-and-push-image:
    name: Build and Push Docker Image
    needs: build-test-analyze
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to container registry
      uses: docker/login-action@v2
      with:
        registry: https://myexplorenowwebapp.azurecr.io/
        username: ${{ secrets.AzureAppService_ContainerUsername_cc5ae4d2b74842a8a31507fe96d5f9e7 }}
        password: ${{ secrets.AzureAppService_ContainerPassword_f135e1eff13149909acb76130b83d1e2 }}
        
    - name: Build and push container image to registry
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: myexplorenowwebapp.azurecr.io/${{ secrets.AzureAppService_ContainerUsername_cc5ae4d2b74842a8a31507fe96d5f9e7 }}/prn231explorenowapi:${{ github.sha }}
        file: ./Dockerfile

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'be-explore-now'
        slot-name: 'production'
        publish-profile: ${{ secrets.AzureAppService_PublishProfile_4dbe2119868941c9938d46b9753ad464 }}
        images: 'myexplorenowwebapp.azurecr.io/${{ secrets.AzureAppService_ContainerUsername_cc5ae4d2b74842a8a31507fe96d5f9e7 }}/prn231explorenowapi:${{ github.sha }}'
    
    - name: Health check
      run: |
        sleep 120
        response_content=$(curl -sS https://be-explore-now.azurewebsites.net/health)
        response_code=$(curl -sS -o /dev/null -w "%{http_code}" https://be-explore-now.azurewebsites.net/health)
        echo "Response content: $response_content"
        echo "Response code: $response_code"
        if [ $response_code = "200" ]; then
          echo "Health check passed"
        else
          echo "Health check failed with status code $response_code"
          exit 1
        fi
        
    - name: Verify deployment
      run: |
        response=$(curl -sS -o /dev/null -w "%{http_code}" https://be-explore-now.azurewebsites.net/swagger/index.html)
        if [ $response = "200" ]; then
          echo "Deployment successful"
        else
          echo "Deployment failed with status code $response"
          exit 1
        fi
